# setting passwords for postgresql
- name: Create random password for pgsql
  set_fact:
    keycloak_db_pass: "{{ random_db_password }}"
 
- name: Check if persistent PSQL pass is saved
  stat:
    path: /root/.keycloak_db_pass
  register: keycloak_db_pass_persistent

- name: Save persistent Keycloak DB pass
  copy:
    content: "{{ keycloak_db_pass }}"
    dest: /root/.keycloak_db_pass
    owner: root
    group: root
    mode: 0600
  when: not keycloak_db_pass_persistent.stat.exists
  register: keycloak_db_pass_state

- name: Read keycloak database password
  shell: cat /root/.keycloak_db_pass
  register: keycloak_db_pass_cat

- name: Set keycloak_db_pass variable
  set_fact:
    keycloak_db_pass: "{{ keycloak_db_pass_cat.stdout }}"

# setting passwords for keycloak superadmin user 
- name: Check if persistent admin pass is saved
  stat:
    path: /root/.keycloak_admin_pass
  register: keycloak_admin_pass_persistent

- name: Create random password for keycloak
  set_fact:
    keycloak_admin_pass: "{{ random_admin_password | default(keycloak['default_admin_pass']) }}"
  when: not keycloak_admin_pass_persistent.stat.exists

- name: Save persistent Keycloak admin pass
  copy:
    content: "{{ keycloak_admin_pass }}"
    dest: /root/.keycloak_admin_pass
    owner: root
    group: root
    mode: 0600
  when: not keycloak_admin_pass_persistent.stat.exists
  register: keycloak_admin_pass_state

- name: Read keycloak database password
  shell: cat /root/.keycloak_admin_pass
  register: keycloak_admin_pass_cat

- name: Set keycloak_admin_pass variable for master realm
  set_fact:
    keycloak_admin_pass: "{{ keycloak_admin_pass_cat.stdout }}"
 
# setting passwords for SSO login
- name: Check if persistent sso user pass is saved
  stat:
    path: /root/.sso_admin_pass
  register: sso_admin_pass_persistent

- name: Create random password for sso user
  set_fact:
    sso_admin_pass: "{{ random_sso_pass | default(keycloak['default_sso_pass']) }}"
  when: not sso_admin_pass_persistent.stat.exists

- name: Save persistent Keycloak sso user pass
  copy:
    content: "{{ sso_admin_pass }}"
    dest: /root/.sso_admin_pass
    owner: root
    group: root
    mode: 0600
  when: not sso_admin_pass_persistent.stat.exists
  register: sso_admin_pass_state

- name: Read keycloak sso user password
  shell: cat /root/.sso_admin_pass
  register: sso_admin_pass_cat

- name: Set sso_admin_pass variable 
  set_fact:
    sso_admin_pass: "{{ sso_admin_pass_cat.stdout }}"